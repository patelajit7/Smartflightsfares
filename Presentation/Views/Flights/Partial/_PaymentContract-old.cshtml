@model Infrastructure.HelpingModel.API.BookingDetail
@using Infrastructure
@using Infrastructure.HelpingModel.API
@using Common
@{ 
    Segments oItem = Model.Contract.TripDetails.OutBoundSegment[0];
    Segments dItem = Model.Contract.TripDetails.OutBoundSegment[Model.Contract.TripDetails.OutBoundSegment.Count - 1];
    Segments RoItem = null;
    Segments RdItem = null;
    if (Model.Contract.TripType == TripType.ROUNDTRIP)
    {
        RoItem = Model.Contract.TripDetails.InBoundSegment[0];
        RdItem = Model.Contract.TripDetails.InBoundSegment[Model.Contract.TripDetails.InBoundSegment.Count - 1];
    }

}
<div class="flightDetail">
    <div class="clearfix"></div>

    <div class="subTittile"><img src="/images/mobile/icons/plane2.svg" alt="icon">Depart |  <span class="travelDest">@Utility.GetAirportCity(oItem.Origin)  (@oItem.Origin) - @Utility.GetAirportCity(dItem.Destination)  (@dItem.Destination)</span> <span class="tripDay">@oItem.Departure.ToString("dddd, MMMM, dd")</span> <span class="totalTripTime"><i class="bi bi-stopwatch"></i> @Utility.GetDuration(Model.Contract.TotalOutBoundFlightDuration)</span></div>

    @for (int i = 0; i <= Model.Contract.TripDetails.OutBoundSegment.Count - 1; i++)
    {
        Segments item = Model.Contract.TripDetails.OutBoundSegment[i];
        if (i != 0)
        {
            DateTime arrivalTime = new DateTime(Model.Contract.TripDetails.OutBoundSegment[i - 1].Arrival.Year, Model.Contract.TripDetails.OutBoundSegment[i - 1].Arrival.Month, Model.Contract.TripDetails.OutBoundSegment[i - 1].Arrival.Day, Model.Contract.TripDetails.OutBoundSegment[i - 1].ArrivalTime.Hours, Model.Contract.TripDetails.OutBoundSegment[i - 1].ArrivalTime.Minutes, 0);
            TimeSpan layoverTime = new DateTime(item.Departure.Year, item.Departure.Month, item.Departure.Day, item.DepartureTime.Hours, item.DepartureTime.Minutes, 0) - arrivalTime;
            if (layoverTime != TimeSpan.MinValue)
            {
                <div class="row">
                    <div class="col-12 layoverSec">
                        <div class="layover"> <i class="bi bi-stopwatch"></i> Layover : @Utility.GetDuration(layoverTime) </div>
                    </div>
                </div>
            }
        }
        <div class="row">
            <div class="col-9 col-sm-4">
                <div class="airlines__details">
                    <img src="@string.Format(Utility.PortalSettings.AirlineLogoLocation, item.MarketingCarrier.Code)" alt="@item.MarketingCarrier.Code">
                    <div class="detail">
                        <div class="air-name" title="@item.MarketingCarrier.Name">@item.MarketingCarrier.Name</div>
                        <div class="flight__info">@item.FlightNumber | @item.MarketingCarrier.Code-@item.FlightNumber</div>
                    </div>
                </div>
            </div>

            <div class="col-3 col-sm-2 order-md-3 pl-0">
                <div class="class__type">
                    @Utility.GetEnumDescription(item.CabinType)
                </div>
            </div>

            <div class="col-sm-6">
                <!--  route-->
                <div class="route__info">

                    <div class="connecting__bar d-none d-md-block">
                        <div class="duretion_time">
                            <span>@Utility.GetDuration(item.FlightDuration)</span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-6">
                            <div class="destinationName">
                                <div class="destination_fullname">
                                    <div class="text-overflow @string.Format("{0}",item.IsOriginHighlight?"highlight":"")" title="@Utility.GetAirportName(item.Origin) (@item.Origin)">@Utility.GetAirportName(item.Origin) (@item.Origin)</div>
                                    @if ((Model.Contract.ContractType == ContractType.NearBy || Model.Contract.ContractType == ContractType.NearByFlexi) && item.IsOriginHighlight)
                                    {
                                        <small class="message_display ">Nearby Airport</small>
                                    }
                                </div>

                                <div>
                                    <div class="date">
                                        <div class="@string.Format("{0}",item.IsDepartDateHighlight?"highlight":"")">@item.Departure.ToString("MMM dd")</div>
                                        @if ((Model.Contract.ContractType == ContractType.Flexi || Model.Contract.ContractType == ContractType.NearByFlexi) && item.IsDepartDateHighlight)
                                        {
                                            <small class="message_display ">Alternate Date</small>
                                        }
                                    </div>
                                    <div class="time">@DateTime.Today.Add(item.DepartureTime).ToString("hh:mm tt")</div>
                                </div>
                               
                            </div>
                        </div>

                        <div class="TripTime  d-md-none d-block">Trip Time : @Utility.GetDuration(item.FlightDuration)</div>

                        <div class="col-sm-6">
                            <div class="destinationName">
                                <div class="destination_fullname">
                                    <div class="@string.Format("{0}",item.IsDestinationHighlight?"highlight":"")"> <div class="text-overflow" title="@Utility.GetAirportName(item.Destination)  (@item.Destination)">@Utility.GetAirportName(item.Destination)  (@item.Destination)</div></div>
                                    @if ((Model.Contract.ContractType == ContractType.NearBy || Model.Contract.ContractType == ContractType.NearByFlexi) && item.IsDestinationHighlight)
                                    {
                                        <small class="message_display ">Nearby Airport</small>
                                    }
                                </div>
                                <div class="time">@DateTime.Today.Add(item.ArrivalTime).ToString("hh:mm tt")</div>
                                <div class="date"><span>@item.Arrival.ToString("MMM dd")</span> </div>

                            </div>
                        </div>
                    </div>
                </div>


                <!--  route-->

            </div>

        </div>
    }

    @if (Model.Contract.TripType == TripType.ROUNDTRIP)
    {
        <div class="retureSec">
            <div class="subTittile"> <img src="/images/mobile/icons/plane2.svg" alt="icon">Return |  <span class="travelDest">@Utility.GetAirportCity(RoItem.Origin)  (@RoItem.Origin) - @Utility.GetAirportCity(RdItem.Destination)  (@RdItem.Destination)</span> <span class="tripDay">@RoItem.Departure.ToString("dddd, MMMM, dd")</span> <span class="totalTripTime"><i class="bi bi-stopwatch"></i> @Utility.GetDuration(Model.Contract.TotalInBoundFlightDuration)</span></div>

            @for (int i = 0; i <= Model.Contract.TripDetails.InBoundSegment.Count - 1; i++)
            {
                Segments item = Model.Contract.TripDetails.InBoundSegment[i];
                if (i != 0)
                {
                    DateTime arrivalTime = new DateTime(Model.Contract.TripDetails.InBoundSegment[i - 1].Arrival.Year, Model.Contract.TripDetails.InBoundSegment[i - 1].Arrival.Month, Model.Contract.TripDetails.InBoundSegment[i - 1].Arrival.Day, Model.Contract.TripDetails.InBoundSegment[i - 1].ArrivalTime.Hours, Model.Contract.TripDetails.InBoundSegment[i - 1].ArrivalTime.Minutes, 0);
                    TimeSpan layoverTime = new DateTime(item.Departure.Year, item.Departure.Month, item.Departure.Day, item.DepartureTime.Hours, item.DepartureTime.Minutes, 0) - arrivalTime;
                    if (layoverTime != TimeSpan.MinValue)
                    {
                        <div class="row">
                            <div class="col-12 layoverSec">
                                <div class="layover"> <i class="bi bi-stopwatch"></i> Layover : @Utility.GetDuration(layoverTime) </div>
                            </div>
                        </div>
                    }
                }
                <div class="row">
                    <div class="col-9 col-sm-4">
                        <div class="airlines__details">
                            <img src="@string.Format(Utility.PortalSettings.AirlineLogoLocation, item.MarketingCarrier.Code)" alt="@item.MarketingCarrier.Code">
                            <div class="detail">
                                <div class="air-name" title="@item.MarketingCarrier.Name">@item.MarketingCarrier.Name</div>
                                <div class="flight__info">@item.FlightNumber | @item.MarketingCarrier.Code-@item.FlightNumber</div>
                            </div>
                        </div>
                    </div>

                    <div class="col-3 col-sm-2 order-md-3 pl-0">
                        <div class="class__type">
                           @Utility.GetEnumDescription(item.CabinType)
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <!--  route-->
                        <div class="route__info">

                            <div class="connecting__bar d-none d-md-block">
                                <div class="duretion_time">
                                    <span>@Utility.GetDuration(item.FlightDuration)</span>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="destinationName">
                                        <div class="destination_fullname">
                                            <div class="text-overflow @string.Format("{0}",item.IsOriginHighlight?"highlight":"")" title="@Utility.GetAirportName(item.Origin) (@item.Origin)">@Utility.GetAirportName(item.Origin) (@item.Origin)</div>
                                            @if ((Model.Contract.ContractType == ContractType.NearBy || Model.Contract.ContractType == ContractType.NearByFlexi) && item.IsOriginHighlight)
                                            {
                                                <small class="message_display ">Nearby Airport</small>
                                            }
                                        </div>

                                        <div class="time">@DateTime.Today.Add(item.DepartureTime).ToString("hh:mm tt")</div>
                                        <div class="date">
                                            <div class="@string.Format("{0}",item.IsDepartDateHighlight?"highlight":"")">@item.Departure.ToString("MMM dd")</div>
                                            @if ((Model.Contract.ContractType == ContractType.Flexi || Model.Contract.ContractType == ContractType.NearByFlexi) && item.IsDepartDateHighlight)
                                            {
                                                <small class="message_display ">Alternate Date</small>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="TripTime  d-md-none d-block">Trip Time : @Utility.GetDuration(item.FlightDuration)</div>

                                <div class="col-sm-6">
                                    <div class="destinationName">
                                        <div class="destination_fullname">
                                            <div class="@string.Format("{0}",item.IsDestinationHighlight?"highlight":"")"> <div class="text-overflow" title="@Utility.GetAirportCity(item.Destination)  (@item.Destination)">@Utility.GetAirportCity(item.Destination)  (@item.Destination)</div></div>
                                            @if ((Model.Contract.ContractType == ContractType.NearBy || Model.Contract.ContractType == ContractType.NearByFlexi) && item.IsDestinationHighlight)
                                            {
                                                <small class="message_display ">Nearby Airport</small>
                                            }

                                        </div>
                                        <div class="time">@DateTime.Today.Add(item.ArrivalTime).ToString("hh:mm tt")</div>
                                        <div class="date"><span>@item.Arrival.ToString("MMM dd")</span> </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

            }


        </div>
    }

</div>
