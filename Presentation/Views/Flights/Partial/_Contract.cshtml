@model Infrastructure.HelpingModel.API.Contract
@using Infrastructure
@using Infrastructure.HelpingModel
@using Infrastructure.HelpingModel.API
@using Common
@{
    CurrencyMaster currencyMaster = Presentation.Controllers.ShareUtility.GetCurrency(Request);
    string basicEcoAirline = string.Empty;
    float actualMinPrice = 0;
    BaggageInfoType personal = null, carryon = null, checkin = null;
    if (Model != null && Model.BaggageDetails != null && Model.BaggageDetails.OutboundBaggage != null)
    {
        personal = Model.BaggageDetails.OutboundBaggage.PesonalItem;
        carryon = Model.BaggageDetails.OutboundBaggage.CarryOn;
        checkin = Model.BaggageDetails.OutboundBaggage.Checkin;

    }

}


<div class="repeat_results">
    @switch (Model.ContractType)
    {
        case ContractType.NearBy:
            actualMinPrice = Utility.GetActualMinFare(Model.SearchGuid);
            if (Model.AdultFare.TotalFarePPax < actualMinPrice)
            {
                <div class="save_price_msg">Save <span class="chgcomplete" default-price="@(actualMinPrice-Model.AdultFare.TotalFarePPax)">@String.Format("{0}{1:0.00}", currencyMaster.CurrencySymbol, (actualMinPrice - Model.AdultFare.TotalFarePPax) * currencyMaster.CurrencyPrice)</span> by selecting nearby airport</div>
            }
            else
            {
                <div class="save_price_msg">Nearby airport</div>
            }
            break;
        case ContractType.Flexi:
            actualMinPrice = Utility.GetActualMinFare(Model.SearchGuid);
            if (Model.AdultFare.TotalFarePPax < actualMinPrice)
            {
                <div class="save_price_msg">Save <span class="chgcomplete" default-price="@(actualMinPrice-Model.AdultFare.TotalFarePPax)">@String.Format("{0}{1:0.00}", currencyMaster.CurrencySymbol, (actualMinPrice - Model.AdultFare.TotalFarePPax) * currencyMaster.CurrencyPrice)</span> by selecting alternate dates</div>
            }
            else
            {
                <div class="save_price_msg">Alternate dates</div>
            }
            break;
        case ContractType.NearByFlexi:
            actualMinPrice = Utility.GetActualMinFare(Model.SearchGuid);
            if (Model.AdultFare.TotalFarePPax < actualMinPrice)
            {
                <div class="save_price_msg">Save <span class="chgcomplete" default-price="@(actualMinPrice-Model.AdultFare.TotalFarePPax)">@String.Format("{0}{1:0.00}", currencyMaster.CurrencySymbol, (actualMinPrice - Model.AdultFare.TotalFarePPax) * currencyMaster.CurrencyPrice)</span> by selecting alternate dates & nearby airport</div>
            }
            else
            {
                <div class="save_price_msg">Alternate dates & Nearby airport</div>
            }
            break;
    }
    @{
        Segments oItem = Model.TripDetails.OutBoundSegment[0];
        Segments dItem = Model.TripDetails.OutBoundSegment[Model.TripDetails.OutBoundSegment.Count - 1];
        int stops = 0;
        if (oItem.CabinType == CabinType.BasicEconomy && Utility.Settings.BasicEconomyAirlines.Contains(oItem.MarketingCarrier.Code) && string.IsNullOrEmpty(basicEcoAirline))
        {
            basicEcoAirline = oItem.MarketingCarrier.Code;
        }
    }
    @{
        float totalFare = 0;
        float totalTaxFare = 0;
        float totalbaseFare = 0;
        totalFare = Model.AdultFare.TotalFarePPax * currencyMaster.CurrencyPrice;
        totalTaxFare = Model.AdultFare.TaxPPax * currencyMaster.CurrencyPrice;
        totalbaseFare = Model.AdultFare.BaseFarePPax * currencyMaster.CurrencyPrice;
    }
    <div class="resultsBox">
        <div class="row">
            <div class="col-md-9 pr-lg-0">

                <!-- Flight row-->
                <div class="flight__row">
                    <!--Mobile price added-->
                    <div class=" d-md-none d-block">
                        <div class="top_row_mobile">
                            <div class="price_list">

                                <div class="price"><span class="chgWithCurrency" default-price="@Model.AdultFare.TotalFarePPax">@String.Format("{0}{1:0}", currencyMaster.CurrencySymbol, Math.Truncate(totalFare))</span><sup class="chgCurrencySub" default-price="@Model.AdultFare.TotalFarePPax">@String.Format("{0:#.00}", (totalFare - Convert.ToSingle(Math.Truncate(totalFare))))</sup> </div>
                                <div class="seat_left highlight mt-3">Hurry!! Only @string.Format("{0}", Model.MinSeatAvailableForContract > 1 ? Model.MinSeatAvailableForContract.ToString() : "Few") @String.Format("{0}", Model.MinSeatAvailableForContract > 1 ? "Seats" : "Seat") left</div>
                            </div>
                        </div>
                    </div>
                    <!--Mobile price added End-->
                    <div class="head">Departure  <span class="date"> | @oItem.Departure.ToString("ddd, MMM dd")</span></div>

                    <div class="row">
                        <div class="col-md-5 col-2">
                            <img src="@string.Format(Utility.PortalSettings.AirlineLogoLocation, oItem.MarketingCarrier.Code)" alt="@oItem.MarketingCarrier.Code" class="airline_logo" />

                            <div class="flights_info d-none d-md-block">
                                <div class="airline_name"> @oItem.MarketingCarrier.Name</div>
                                <div class="flights_number">
                                    Flight No: @oItem.FlightNumber | @oItem.MarketingCarrier.Code-@oItem.FlightNumber
                                    <!-- Tooltip-->
                                    @*<div class="tooltip_block">
                                            <i class="bi bi-info-circle tooltip-icon"></i>

                                            <div class="custom_tooltip">

                                                <i class="bi bi-x tooltip_close"></i>

                                                Boeing 787-9 Dreamliner 295-350 STD SEATS
                                            </div>
                                        </div>*@
                                    <!-- Tooltip-->

                                </div>
                            </div>
                        </div>
                        <div class="col-md-7 col-10 pl-0">
                            <div class="leg-details">

                                <div class="city">
                                    <div class="time"><strong>@DateTime.Today.Add(oItem.DepartureTime).ToString("hh:mm")</strong> @DateTime.Today.Add(oItem.DepartureTime).ToString("tt").ToLower()</div>
                                    <div class="code">@oItem.Origin</div>
                                </div>

                                <!-- connecting block-->
                                <div class="connnecting-block">
                                    <div class="leg-points">
                                        @if (Model.TripDetails.OutBoundSegment.Count > 1)
                                        {
                                            for (int i = 0; i <= Model.TripDetails.OutBoundSegment.Count - 1; i++)
                                            {
                                                Segments item = Model.TripDetails.OutBoundSegment[i];
                                                if (i != 0)
                                                {
                                                    DateTime arrivalTime = new DateTime(Model.TripDetails.OutBoundSegment[i - 1].Arrival.Year, Model.TripDetails.OutBoundSegment[i - 1].Arrival.Month, Model.TripDetails.OutBoundSegment[i - 1].Arrival.Day, Model.TripDetails.OutBoundSegment[i - 1].ArrivalTime.Hours, Model.TripDetails.OutBoundSegment[i - 1].ArrivalTime.Minutes, 0);
                                                    TimeSpan layoverTime = new DateTime(item.Departure.Year, item.Departure.Month, item.Departure.Day, item.DepartureTime.Hours, item.DepartureTime.Minutes, 0) - arrivalTime;
                                                    if (layoverTime != TimeSpan.MinValue)
                                                    {
                                                        @*<div class="layover"> <i class="bi bi-stopwatch"></i> Layover : @Utility.GetDuration(layoverTime) </div>*@
                                                        <div class="stops">
                                                            <div class="layovertime">@Utility.GetDuration(layoverTime) </div>

                                                            <span class="d-block">@item.Origin</span>
                                                        </div>
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {

                                            <div class="noneStop">
                                                <div class="layovertime">@Utility.GetDuration(Model.TotalOutBoundFlightDuration) </div>
                                                <span class="d-block">Non Stop</span>
                                            </div>
                                        }

                                    </div>
                                    @if (Model.TripDetails.OutBoundSegment.Count > 1)
                                    {
                                        <!-- Tooltip-->
                                        <div class="tooltipBox">
                                            <p><b>Flight Duration:</b> @Utility.GetDuration(Model.TotalOutBoundFlightDuration)</p>

                                            @for (int i = 0; i <= Model.TripDetails.OutBoundSegment.Count - 1; i++)
                                            {
                                                Segments item = Model.TripDetails.OutBoundSegment[i];
                                                if (i != 0)
                                                {
                                                    DateTime arrivalTime = new DateTime(Model.TripDetails.OutBoundSegment[i - 1].Arrival.Year, Model.TripDetails.OutBoundSegment[i - 1].Arrival.Month, Model.TripDetails.OutBoundSegment[i - 1].Arrival.Day, Model.TripDetails.OutBoundSegment[i - 1].ArrivalTime.Hours, Model.TripDetails.OutBoundSegment[i - 1].ArrivalTime.Minutes, 0);
                                                    TimeSpan layoverTime = new DateTime(item.Departure.Year, item.Departure.Month, item.Departure.Day, item.DepartureTime.Hours, item.DepartureTime.Minutes, 0) - arrivalTime;
                                                    if (layoverTime != TimeSpan.MinValue)
                                                    {
                                                        <p><b>Layover @(i):</b> @Utility.GetDuration(layoverTime), @Utility.GetAirportName(item.Origin) </p>
                                                    }
                                                }
                                            }

                                        </div>
                                        <!-- Tooltip-->
                                    }
                                </div>
                                <!-- Connecting block end-->

                                <div class="city">
                                    <div class="time"><strong>@DateTime.Today.Add(dItem.ArrivalTime).ToString("hh:mm")</strong> @DateTime.Today.Add(dItem.ArrivalTime).ToString("tt").ToLower()</div>
                                    <div class="code">@dItem.Destination</div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                @if (Model.TripType == TripType.ROUNDTRIP)
                {
                    oItem = Model.TripDetails.InBoundSegment[0];
                    dItem = Model.TripDetails.InBoundSegment[Model.TripDetails.InBoundSegment.Count - 1];

                    <div class="flight__row return_flights">
                        <div class="head">Return  <span class="date">| @oItem.Departure.ToString("ddd, MMM dd")</span></div>
                        <div class="row">
                            <div class="col-md-5 col-2">
                                <img src="@string.Format(Utility.PortalSettings.AirlineLogoLocation, oItem.MarketingCarrier.Code)" alt="@oItem.MarketingCarrier.Code" class="airline_logo" />

                                <div class="flights_info d-none d-md-block">
                                    <div class="airline_name"> @oItem.MarketingCarrier.Name</div>
                                    <div class="flights_number">
                                        Flight No: @oItem.FlightNumber | @oItem.MarketingCarrier.Code-@oItem.FlightNumber
                                        <!-- Tooltip-->
                                        @*<div class="tooltip_block">
                                                <i class="bi bi-info-circle tooltip-icon"></i>

                                                <div class="custom_tooltip">

                                                    <i class="bi bi-x tooltip_close"></i>

                                                    Boeing 787-9 Dreamliner 295-350 STD SEATS
                                                </div>
                                            </div>*@
                                        <!-- Tooltip-->

                                    </div>
                                </div>
                            </div>
                            <div class="col-md-7 col-10 pl-0">
                                <div class="leg-details">

                                    <div class="city">
                                        <div class="time"><strong>@DateTime.Today.Add(oItem.DepartureTime).ToString("hh:mm")</strong> @DateTime.Today.Add(oItem.DepartureTime).ToString("tt").ToLower()</div>
                                        <div class="code">@oItem.Origin</div>
                                    </div>

                                    <!-- connecting block-->
                                    <div class="connnecting-block">
                                        <div class="leg-points">

                                            @if (Model.TripDetails.InBoundSegment.Count > 1)
                                            {
                                                for (int i = 0; i <= Model.TripDetails.InBoundSegment.Count - 1; i++)
                                                {
                                                    Segments item = Model.TripDetails.InBoundSegment[i];
                                                    if (i != 0)
                                                    {
                                                        DateTime arrivalTime = new DateTime(Model.TripDetails.InBoundSegment[i - 1].Arrival.Year, Model.TripDetails.InBoundSegment[i - 1].Arrival.Month, Model.TripDetails.InBoundSegment[i - 1].Arrival.Day, Model.TripDetails.InBoundSegment[i - 1].ArrivalTime.Hours, Model.TripDetails.InBoundSegment[i - 1].ArrivalTime.Minutes, 0);
                                                        TimeSpan layoverTime = new DateTime(item.Departure.Year, item.Departure.Month, item.Departure.Day, item.DepartureTime.Hours, item.DepartureTime.Minutes, 0) - arrivalTime;
                                                        if (layoverTime != TimeSpan.MinValue)
                                                        {
                                                            @*<div class="layover"> <i class="bi bi-stopwatch"></i> Layover : @Utility.GetDuration(layoverTime) </div>*@
                                                            <div class="stops">
                                                                <div class="layovertime">@Utility.GetDuration(layoverTime) </div>
                                                                <span class="d-block">@item.Origin</span>
                                                            </div>
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {

                                                <div class="noneStop">
                                                    <div class="layovertime">@Utility.GetDuration(Model.TotalInBoundFlightDuration) </div>
                                                    <span>Non Stop</span>
                                                </div>
                                            }

                                        </div>
                                        @if (Model.TripDetails.InBoundSegment.Count > 1)
                                        {
                                            <!-- Tooltip-->
                                            <div class="tooltipBox">
                                                <p><b>Flight Duration:</b> @Utility.GetDuration(Model.TotalInBoundFlightDuration)</p>

                                                @for (int i = 0; i <= Model.TripDetails.InBoundSegment.Count - 1; i++)
                                                {
                                                    Segments item = Model.TripDetails.InBoundSegment[i];
                                                    if (i != 0)
                                                    {
                                                        DateTime arrivalTime = new DateTime(Model.TripDetails.InBoundSegment[i - 1].Arrival.Year, Model.TripDetails.InBoundSegment[i - 1].Arrival.Month, Model.TripDetails.InBoundSegment[i - 1].Arrival.Day, Model.TripDetails.InBoundSegment[i - 1].ArrivalTime.Hours, Model.TripDetails.InBoundSegment[i - 1].ArrivalTime.Minutes, 0);
                                                        TimeSpan layoverTime = new DateTime(item.Departure.Year, item.Departure.Month, item.Departure.Day, item.DepartureTime.Hours, item.DepartureTime.Minutes, 0) - arrivalTime;
                                                        if (layoverTime != TimeSpan.MinValue)
                                                        {
                                                            <p><b>Layover @(i):</b> @Utility.GetDuration(layoverTime), @Utility.GetAirportName(item.Origin) </p>
                                                        }
                                                    }
                                                }

                                            </div>
                                            <!-- Tooltip-->
                                        }

                                    </div>
                                    <!-- Connecting block end-->

                                    <div class="city">
                                        <div class="time"><strong>@DateTime.Today.Add(dItem.ArrivalTime).ToString("hh:mm")</strong> @DateTime.Today.Add(dItem.ArrivalTime).ToString("tt").ToLower()</div>
                                        <div class="code">@dItem.Destination</div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>


                }

            </div>

            <div class="col-md-3 d-none d-md-block">
                <div class="price_list">
                    <div class="class_type">@string.Format("{0}", Model.TripDetails != null && Model.TripDetails.InBoundSegment != null && Model.TripDetails.InBoundSegment.Count > 0 ? Utility.GetEnumDescription(Model.TripDetails.InBoundSegment[0].CabinType) : "Economy")</div>
                    <div class="price"><span class="chgWithCurrency" default-price="@Model.AdultFare.TotalFarePPax">@String.Format("{0}{1:0}", currencyMaster.CurrencySymbol, Math.Truncate(totalFare))</span><sup class="chgCurrencySub" default-price="@Model.AdultFare.TotalFarePPax">@String.Format("{0:#.00}", (totalFare - Convert.ToSingle(Math.Truncate(totalFare))))</sup></div>
                    @*<div class="fare__breakup">
                        <a href="javascript:void(0);" class="fare__detail">
                            Fare Detail
                            <span>(incl. taxes)</span>
                        </a>
                       <div class="fare_breakup_detail">
                <a href="javascript:void(0);" class="close_price_breakup">X</a>
                <ul>
                    <li>
                        <div class="traveler">
                            Flight Price
                            <span>Per person</span>
                        </div>
                        <div class="breakup_price"><span class="chgWithCurrency" default-price="@Model.AdultFare.BaseFarePPax">@String.Format("{0}{1:0}", currencyMaster.CurrencySymbol, Math.Truncate(totalbaseFare))</span><sup class="chgCurrencySub" default-price="@Model.AdultFare.BaseFarePPax">@String.Format("{0:#.00}", (totalbaseFare - Convert.ToSingle(Math.Truncate(totalbaseFare))))</sup></div>
                    </li>

                    <li>
                        <div class="traveler">Taxes & Fees</div>
                        <div class="breakup_price"><span class="chgWithCurrency" default-price="@Model.AdultFare.TaxPPax">@String.Format("{0}{1:0}", currencyMaster.CurrencySymbol, Math.Truncate(totalTaxFare))</span><sup class="chgCurrencySub" default-price="@Model.AdultFare.TaxPPax">@String.Format("{0:#.00}", (totalTaxFare - Convert.ToSingle(Math.Truncate(totalTaxFare))))</sup></div>
                    </li>

                    <li class="total__price">
                        <div class="traveler">Total</div>
                        <div class="breakup_price"><span class="chgWithCurrency" default-price="@Model.AdultFare.TotalFarePPax">@String.Format("{0}{1:0}", currencyMaster.CurrencySymbol, Math.Truncate(totalFare))</span><sup class="chgCurrencySub" default-price="@Model.AdultFare.TotalFarePPax">@String.Format("{0:#.00}", (totalFare - Convert.ToSingle(Math.Truncate(totalFare))))</sup></div>
                    </li>
                </ul>
            </div>
        </div>*@
                    @if (Model.BookingStatus == BookingStatus.SoldOutOrUnavailable)
                    {
                        <a href="#" class="select__btn d-none d-md-block disabled" style="background: gray;cursor: no-drop;">Soldout <i class="bi bi-chevron-right ml-2" aria-hidden="true"></i></a>
                    }
                    else
                    {
                        <a href="#" class="select__btn d-none d-md-block" @string.Format("{0}", Model.BookingStatus == BookingStatus.SoldOutOrUnavailable ? "" : " onclick=contractFilter.setVerificationContract(\"" + Model.SearchGuid + "\",\"" + Model.ContractId + "\",\"" + ((int)Model.ContractType) + "\");")>Select <i class="bi bi-chevron-right ml-2" aria-hidden="true"></i></a>
                        <div class="seat_left highlight mt-3">Hurry!! Only @string.Format("{0}", Model.MinSeatAvailableForContract > 1 ? Model.MinSeatAvailableForContract.ToString() : "Few") Seats left</div>
                    }

                </div>
            </div>
        </div>

        <div class="results_bottom d-none d-md-block">
            <div class="row">
                <div class="col-6">
                    <div class="bagguage_fees">
                        <ul>
                            <li class="@string.Format("{0}", personal!=null && personal.IsAllowed ? "check":"noCheck")"> <img src="~/Images/bag.svg" alt="bag" /> </li>
                            <li class="@string.Format("{0}", carryon!=null && carryon.IsAllowed ? "check":"noCheck")"><img src="~/Images/bag1.svg" alt="bag" /></li>
                            <li class="@string.Format("{0}", checkin!=null && checkin.IsAllowed? "check":"noCheck")"><img src="~/Images/bag2.svg" alt="bag" /></li>
                        </ul>
                        <div class="tooltipBox">
                            <div class="row">
                                <div class="col-8 leftSec">
                                    <img src="~/Images/bag.svg" alt="bag" class="bag" /> Personal Item
                                </div>
                                <div class="col-4 text-right @string.Format("{0}", personal!=null && personal.IsAllowed ? "included":"") pl-0"><i class="bi @string.Format("{0}", personal!=null && personal.IsAllowed ? "bi-check2":"bi-x")"></i> @string.Format("{0}", personal != null && personal.IsAllowed ? "Included" : "Not Included") </div>
                                <div class="col-12">
                                    <ul class="baggesInfo">@Html.Raw(string.Format("{0}", personal != null && !string.IsNullOrEmpty(personal.Description) ? personal.Description : "Purse, small backpack, briefcase"))</ul>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-8 leftSec">
                                    <img src="~/Images/bag1.svg" alt="bag" class="bag" /> Carry-on Bag
                                   
                                </div>
                                <div class="col-4 text-right @string.Format("{0}", carryon!=null && carryon.IsAllowed ? "included":"") pl-0">
                                    <span><i class="bi @string.Format("{0}", carryon!=null && carryon.IsAllowed ? "bi-check2":"bi-x")"></i> @string.Format("{0}", carryon != null && carryon.IsAllowed ? "Included" : "Not Included")</span>

                                </div>
                                <div class="col-12">
                                    <ul class="baggesInfo">@Html.Raw(string.Format("{0}", carryon != null && !string.IsNullOrEmpty(carryon.Description) ? carryon.Description : ""))</ul>
                                </div>
                                </div>

                                <div class="row">
                                    <div class="col-8 leftSec">
                                        <img src="~/Images/bag2.svg" alt="bag" class="bag last" /> Checked Bag
                                       
                                    </div>
                                    <div class="col-4 text-right @string.Format("{0}", checkin!=null && checkin.IsAllowed ? "included":"") pl-0">
                                        <i class="bi @string.Format("{0}", checkin!=null && checkin.IsAllowed ? "bi-check2":"bi-x")"></i> @string.Format("{0}", checkin != null && checkin.IsAllowed ? "Included" : "Not Included")
                                    </div>

                                    <div class="col-12">
                                        <ul class="baggesInfo">@Html.Raw(string.Format("{0}", checkin != null && !string.IsNullOrEmpty(checkin.Description) ? checkin.Description : ""))</ul>
                                    </div>
                                </div>

                            </div>

                    </div>
                </div>
                @if (Model.BookingStatus != BookingStatus.SoldOutOrUnavailable)
                {
                    <div class="col-6 text-right">
                        @if (Utility.Settings.IsSentItineraryEnable)
                        {
                            <a href="javascript:void(0);" class="flightInfo" onclick="openSentItin('@Model.SearchGuid','@Model.ContractId')">Share itinerary <i class="bi bi-chevron-right" aria-hidden="true"></i></a>
                        }
                        <a href="javascript:void(0);" class="flight_detail_btn" data-target="#@string.Format("ContractDetails{0}",@Model.ContractId)" onclick="GetContractDetails('@Model.SearchGuid',@Model.ContractId)">Flight details   <i class="bi bi-chevron-right" aria-hidden="true"></i></a>
                    </div>
                }
            </div>
        </div>


    </div>
</div>

<div id="@string.Format("ContractDetails{0}",@Model.ContractId)">
    <div class="data"></div>
</div>


