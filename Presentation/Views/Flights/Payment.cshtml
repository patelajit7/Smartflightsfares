@model Infrastructure.HelpingModel.API.BookingDetail
@using Infrastructure.HelpingModel.API;
@using Infrastructure.HelpingModel;
@using Common
@using Infrastructure
@{
    <title>Review Trip Details & Book : @Utility.PortalSettings.PortalDetails.BrandName</title>
    Layout = "~/Views/Shared/_BookingPathLayout.cshtml";
}
@{
    CurrencyMaster currencyMaster = Presentation.Controllers.ShareUtility.GetCurrency(Request);
}
<div id="resultsCntr">
    <div class="container">
        @using (Html.BeginForm("Payment", "Flights", FormMethod.Post, new { @id = "payment" }))
        {
            <input type="hidden" id="insTranscationId" name="TravelerInsurance.TransactionId" value="" />
            <input type="hidden" id="insCardType" name="TravelerInsurance.CardType" value="" />
            <input type="hidden" id="insToken" name="TravelerInsurance.Token" value="" />
            <input type="hidden" name="guid" id="guid" value="@Model.Contract.SearchGuid" />
            <div class="payment__top d-none d-lg-block">
                <div class="row">
                    <div class="col-sm-1">
                        <a href="javascript:void(0)" onclick="window.location='@string.Format("{0}flights/availability/{1}", Utility.PortalSettings.DomainUrl, Model.Contract.SearchGuid)'" class="go__back"><i class="fa fa-angle-left"></i> Back</a>
                    </div>
                    <div class="col-sm-11 cong">
                        <span>Congratulations,</span> you have got the best fares. Review trip and book! Fares selling fast.. Act now & Save!
                    </div>

                </div>
            </div>

            <div class="row">
                <div class="col-lg-9 col-md-12">

                    <div class="payment__wrapper">

                        <div class="flight__itenaryBox">
                            <div class="head d-none d-lg-inline-block">
                                <h2 class="page__title"><strong>Flight</strong> Detail</h2>
                            </div>

                            @{ Html.RenderPartial("~/views/flights/partial/_PaymentContract.cshtml", Model);}

                            @{ Html.RenderPartial("~/views/flights/partial/_Travellers.cshtml", Model);}
                            @*@{ Html.RenderPartial("~/views/flights/partial/_ExtendedCancellation.cshtml", Model);}*@

                            @{ Html.RenderPartial("~/views/flights/partial/_BillingDetails.cshtml", Model);}
                            @{ Html.RenderPartial("~/views/flights/partial/_ContactDetails.cshtml", Model);}
                        </div>

                        <div class="bottom_text">
                            <h5>Review Information</h5>
                            <p><b>Total price shown includes all applicable taxes and our fees. Some airlines may charge additional baggage fees or other fees. Fares are not guaranteed until ticketed.</b></p>
                            <ul>
                                <li>Most Fares are non-refundable..</li>
                                <li>Some discounted tickets do not allow for frequent flyer mileage accrual. Please check with individual airline for details..</li>
                                <li>All Date changes / Cancellations must be made prior to departure of the flight, and must be done directly with Trippro Support.</li>
                            </ul>
                            <p> <b>Note</b> - Some tickets are non refundable - and non transferable, All service fees are non-refundable. Name changes are not permitted. Fares are not guaranteed until ticketed. All changes are subject to availability, additional fees, airlines rules and regulations. All travelers must confirm that their travel documents required are current and valid for your destination. View our user agreement for post booking charges and airline Fare Rules.</p>
                        </div>
                        <div class="bottom__row">
                            <span class="checkOption inputSet">
                                <label>
                                    <input type="checkbox" name="TermCondition" value="0" id="TermCondition"><span class="text-overflow">By checking this box I confirm that I am ready to Book</span>
                                </label>
                                <span id="error_TermCondition">
                                    Please tick the check box to continue booking.
                                </span>
                            </span>

                            <a href="javascript:void(0);" onclick="p.validatePayment(0);" class="continue__button confirm">
                                Complete Booking
                            </a>
                        </div>

                    </div>
                </div>
                <div class="col-lg-3 col-md-12">
                   @{ Html.RenderPartial("~/views/flights/partial/_pricedetails.cshtml", Model);}
                </div>
            </div>
        }
    </div>
</div>


@{Html.RenderPartial("~/views/flights/partial/_PaymentIdlePopup.cshtml");}
@if (Model.PriceIncrease > 0)
{
    float amount = Utility.GetAllTotalAmount(Model);
    Html.RenderPartial("~/views/flights/partial/_PriceIncreasePopup.cshtml", Tuple.Create<float, float, string>(amount, Model.PriceIncrease, Model.Contract.SearchGuid));
}

@section scripts{
    @{
        DateTime trvDate = Model.Contract.TripDetails.OutBoundSegment[0].Departure;
    }
    <script>
        reqPass = false;
    </script>
    @Scripts.Render("~/bundles/payment")
    <script>

            DOMAIN_URL = "@Common.Utility.PortalSettings.DomainUrl";
            PAX_COUNTER = parseInt("@Model.Travellers.Count", 10);
            TRV_DATE = new Date(parseInt("@trvDate.Year", 10), parseInt("@trvDate.Month", 10) - 1, parseInt("@trvDate.Day", 10));
            PROVIDER = parseInt("@((int)Model.Contract.Provider)");
            setStateOnCountry();
            if (parseFloat("@Model.PriceIncrease", 10) > 0) {
            $(window).on('load', function () {
                $('#PriceIncreasePopup').show();
                });
            }
    </script>

    <script>
        stickyElem = document.querySelector(".sticky-div");
        currStickyPos = stickyElem.getBoundingClientRect().top + window.pageYOffset;
        window.onscroll = function () {
            if (window.pageYOffset > currStickyPos) {
                stickyElem.style.position = "fixed";
                stickyElem.style.top = "10px";
            } else {
                stickyElem.style.position = "relative";
                stickyElem.style.top = "initial";
            }
        }
    </script>

    <script>
        // Set the date we're counting down to
        var countDownDate = new Date().getTime() + 15 * 60 * 1000;

        // Update the count down every 1 second
        var x = setInterval(function () {

            // Get today's date and time
            var now = new Date().getTime();

            // Find the distance between now and the count down date
            var distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Output the result in an element with id="demo"
            document.getElementById("timerCount").innerHTML = minutes + "m " + seconds + "s " + "<span> left </span>";

            // If the count down is over, write some text 
            if (distance < 0) {
                clearInterval(x);
                document.getElementById("timerCount").innerHTML = "00:00";
                $('#PaymentIdlePopup').show();
            }
        }, 1000);
    </script>

}
